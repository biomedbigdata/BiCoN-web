import pandas as pd

from django.views.generic import TemplateView
from django.http import HttpResponse, HttpResponseNotFound

from .tasks import algo_output_task, script_output_task, preprocess_file_2


class IndexView(TemplateView):
    template_name = "clustering/index.html"


class AnalysisSetupView(TemplateView):
    template_name = "clustering/analysis_setup.html"


def submit_analysis(request):
    """
    Parse the options and files from the given POST request (generated by AnalysisSetupView)
    and start analysis task with Celery
    """

    print(request.POST)
    print(request.FILES)

    # ========== Test if all the parameters are set correctly ==========

    # ========== Parse algorithm parameters from post request ==========
    # --- Step 4 (Required)
    nbr_iter = request.POST.get("nbr_iter")  # Todo check with Olga if defaults should be set (45?)
    lgmin = int(request.POST['L_g_min'])
    lgmax = int(request.POST['L_g_max'])

    # --- Step 4 (Optional)
    save_data = request.POST.get("save_data", None)
    gene_set_size = request.POST.get("gene_set_size", 2000)
    nbr_ants = request.POST.get("nbr_ants", 30)
    evap = request.POST.get("evap", 0.3)
    pher_sig = request.POST.get("pher", 1)
    hi_sig = request.POST.get("hisig", 1)
    epsilon = request.POST.get("stopcr", 0.02)

    # --- Step 1: Expression Data
    # Get selected option
    option = request.POST['expression-data']

    if option == 'lung-cancer':
        fh1 = open("clustering/data/lung_cancer_expr.csv")
        exprstr = fh1.read()
        clinicaldf = pd.read_csv("clustering/data/lung_cancer_clinical.csv")
        # fh4 is for METADATA look at it later
        fh4 = open("clustering/data/lung_cancer_clinical.csv")
        clinicalstr = fh4.read()
        fh4.flush()
        fh4.close()
        survival_col_name = "disease free survival in months:ch1"
        nbr_groups = 2

    elif option == 'brest-cancer':
        pass

    elif option == 'custom':    # TODO refractor?!
        exprstr = request.FILES['expression-data'].read().decode('utf-8')
        result10 = preprocess_file_2.delay(exprstr)
        (exprstr, nbr_groups) = result10.get()

    # If no option could be parsed, stop!
    else:
        return HttpResponseNotFound(f"No option found. Provided option was '{option}'")

        # ========== Run the clustering algorithm ==========

    result1 = algo_output_task.delay(1, lgmin, lgmax, exprstr, ppistr, nbr_iter, nbr_ants, evap,
                                     epsilon, hi_sig, pher_sig, session_id, gene_set_size, nbr_groups)
    (T, row_colors, col_colors, G2, means, genes_all, adjlist, genes1, group1_ids, group2_ids, jac_1,
     jac_2) = result1.get()
    # make plots and process results
    result2 = script_output_task.delay(T, row_colors, col_colors, G2, means, genes_all, adjlist, genes1,
                                       group1_ids, group2_ids, clinicalstr, jac_1, jac_2,
                                       survival_col_name, clinicaldf, session_id)
    (ret_metadata, path_heatmap, path_metadata, output_plot_path, json_path, p_val) = result2.get()


class DocumentationView(TemplateView):
    template_name = 'clustering/documentation.html'


class SourceView(TemplateView):
    template_name = 'clustering/source.html'

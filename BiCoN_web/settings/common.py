"""
Django settings for BiCoN_web project.

Generated by 'django-admin startproject' using Django 2.1.3.
using this template https://github.com/Mischback/django-project-skeleton

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import os
import sys

from os.path import abspath, basename, dirname, join, normpath
from importlib_metadata import version

# ##### BiCoN CONFIGURATION ###############################
BICON_WEB_VERSION_NUMBER = '1.2.0'  # Manually specify the web version
BICON_PACKAGE_VERSION_NUMBER = version('bicon')  # Automatically grab the used BiCoN version

# ##### PATH CONFIGURATION ################################

# fetch Django's project directory (BiCoN-web/BiCoN_web)
DJANGO_ROOT = dirname(dirname(abspath(__file__)))

# fetch the project_root (BiCoN-web)
PROJECT_ROOT = dirname(DJANGO_ROOT)

# the name of the whole site
SITE_NAME = basename(DJANGO_ROOT)

# collect static files here
STATIC_ROOT = join(PROJECT_ROOT, 'run', 'static')

# collect media files here
MEDIA_ROOT = join(PROJECT_ROOT, 'run', 'media')

# look for static assets here
STATICFILES_DIRS = [
    join(PROJECT_ROOT, 'static'),
]

# look for templates here
# This is an internal setting, used in the TEMPLATES directive
PROJECT_TEMPLATES = [
    join(PROJECT_ROOT, 'templates'),
]

# add apps/ to the Python path
sys.path.append(normpath(join(PROJECT_ROOT, 'apps')))

# ##### APPLICATION CONFIGURATION #########################

# these are the default apps, used in every configuration
DEFAULT_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
    'apps.clustering.apps.Clustering',
]

# Middlewares
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# template stuff
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': PROJECT_TEMPLATES,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages'
            ],
            'builtins': [
                'apps.clustering.templatetags.version_numbers'
            ]
        },
    },
]

# Internationalization
USE_I18N = False

# ##### DJANGO RUNNING CONFIGURATION ######################

# the default WSGI application
WSGI_APPLICATION = '%s.wsgi.application' % SITE_NAME

# the root URL configuration
ROOT_URLCONF = '%s.urls' % SITE_NAME

# the URL for static files
STATIC_URL = f'{os.environ.get("NGINX_PUBLISHED_PATH", "")}/static/'

# the URL for media files
MEDIA_URL = f'{os.environ.get("NGINX_PUBLISHED_PATH", "")}/media/'

# Restrict the cookie access to a certain path (allows for multiple Django instances to run on one server)
# https://docs.djangoproject.com/en/3.0/ref/settings/#std:setting-SESSION_COOKIE_PATH
SESSION_COOKIE_PATH = f'{os.environ.get("NGINX_PUBLISHED_PATH")}/'
# https://docs.djangoproject.com/en/3.0/ref/settings/#std:setting-CSRF_COOKIE_PATH
CSRF_COOKIE_PATH = f'{os.environ.get("NGINX_PUBLISHED_PATH")}/'

# ##### DEBUG CONFIGURATION ###############################
DEBUG = False

# ##### SECURITY CONFIGURATION ############################

# Allow embedding as X-Frame from the same origin (for the survival plotly graph)
X_FRAME_OPTIONS = 'SAMEORIGIN'

# We store the secret key here
SECRET_FILE = normpath(join(PROJECT_ROOT, 'run', 'SECRET.key'))

# Grab or generate the SECRET KEY
try:
    SECRET_KEY = open(SECRET_FILE).read().strip()
except IOError:
    try:
        from django.utils.crypto import get_random_string

        chars = 'abcdefghijklmnopqrstuvwxyz0123456789!$%&()=+-_'
        SECRET_KEY = get_random_string(50, chars)
        with open(SECRET_FILE, 'w') as f:
            f.write(SECRET_KEY)
    except IOError:
        raise Exception('Could not open %s for writing!' % SECRET_FILE)

# these persons receive error notification
ADMINS = (
    ('your name', 'your_name@example.com'),
)
MANAGERS = ADMINS

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ##### CELERY CONFIGURATION ############################
CELERY_TASK_SERIALIZER = 'pickle'
CELERY_RESULT_SERIALIZER = 'pickle'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']